
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002d0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000354  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001246  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008c0  00000000  00000000  000016b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008b6  00000000  00000000  00001f72  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000230  00000000  00000000  00002828  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000053f  00000000  00000000  00002a58  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000de4  00000000  00000000  00002f97  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  00003d7b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__ctors_end>
   4:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
   8:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
   c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  10:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  14:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  18:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  1c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  20:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  24:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  28:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  2c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  30:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  34:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  38:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  3c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  40:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  44:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  48:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  4c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  50:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  54:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  58:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  5c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  60:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  64:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>

00000068 <LcdCustomChar>:
  68:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
  78:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
  88:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
  98:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000a8 <__ctors_end>:
  a8:	11 24       	eor	r1, r1
  aa:	1f be       	out	0x3f, r1	; 63
  ac:	cf ef       	ldi	r28, 0xFF	; 255
  ae:	d8 e0       	ldi	r29, 0x08	; 8
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	cd bf       	out	0x3d, r28	; 61
  b4:	0e 94 53 01 	call	0x2a6	; 0x2a6 <main>
  b8:	0c 94 66 01 	jmp	0x2cc	; 0x2cc <_exit>

000000bc <__bad_interrupt>:
  bc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c0 <LCDsendChar>:
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
  c0:	98 2f       	mov	r25, r24
  c2:	90 7f       	andi	r25, 0xF0	; 240
  c4:	9b b9       	out	0x0b, r25	; 11
  c6:	9b b1       	in	r25, 0x0b	; 11
  c8:	91 60       	ori	r25, 0x01	; 1
  ca:	9b b9       	out	0x0b, r25	; 11
  cc:	9b b1       	in	r25, 0x0b	; 11
  ce:	94 60       	ori	r25, 0x04	; 4
  d0:	9b b9       	out	0x0b, r25	; 11
  d2:	2a e6       	ldi	r18, 0x6A	; 106
  d4:	2a 95       	dec	r18
  d6:	f1 f7       	brne	.-4      	; 0xd4 <LCDsendChar+0x14>
  d8:	00 c0       	rjmp	.+0      	; 0xda <LCDsendChar+0x1a>
  da:	9b b1       	in	r25, 0x0b	; 11
  dc:	9b 7f       	andi	r25, 0xFB	; 251
  de:	9b b9       	out	0x0b, r25	; 11
  e0:	9b b1       	in	r25, 0x0b	; 11
  e2:	9e 7f       	andi	r25, 0xFE	; 254
  e4:	9b b9       	out	0x0b, r25	; 11
  e6:	9a e6       	ldi	r25, 0x6A	; 106
  e8:	9a 95       	dec	r25
  ea:	f1 f7       	brne	.-4      	; 0xe8 <LCDsendChar+0x28>
  ec:	00 c0       	rjmp	.+0      	; 0xee <LCDsendChar+0x2e>
  ee:	20 e1       	ldi	r18, 0x10	; 16
  f0:	82 9f       	mul	r24, r18
  f2:	c0 01       	movw	r24, r0
  f4:	11 24       	eor	r1, r1
  f6:	8b b9       	out	0x0b, r24	; 11
  f8:	8b b1       	in	r24, 0x0b	; 11
  fa:	81 60       	ori	r24, 0x01	; 1
  fc:	8b b9       	out	0x0b, r24	; 11
  fe:	8b b1       	in	r24, 0x0b	; 11
 100:	84 60       	ori	r24, 0x04	; 4
 102:	8b b9       	out	0x0b, r24	; 11
 104:	8a e6       	ldi	r24, 0x6A	; 106
 106:	8a 95       	dec	r24
 108:	f1 f7       	brne	.-4      	; 0x106 <LCDsendChar+0x46>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <LCDsendChar+0x4c>
 10c:	8b b1       	in	r24, 0x0b	; 11
 10e:	8b 7f       	andi	r24, 0xFB	; 251
 110:	8b b9       	out	0x0b, r24	; 11
 112:	8b b1       	in	r24, 0x0b	; 11
 114:	8e 7f       	andi	r24, 0xFE	; 254
 116:	8b b9       	out	0x0b, r24	; 11
 118:	9a e6       	ldi	r25, 0x6A	; 106
 11a:	9a 95       	dec	r25
 11c:	f1 f7       	brne	.-4      	; 0x11a <LCDsendChar+0x5a>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <LCDsendChar+0x60>
 120:	08 95       	ret

00000122 <LCDsendCommand>:
 122:	98 2f       	mov	r25, r24
 124:	90 7f       	andi	r25, 0xF0	; 240
 126:	9b b9       	out	0x0b, r25	; 11
 128:	9b b1       	in	r25, 0x0b	; 11
 12a:	94 60       	ori	r25, 0x04	; 4
 12c:	9b b9       	out	0x0b, r25	; 11
 12e:	ef ec       	ldi	r30, 0xCF	; 207
 130:	f7 e0       	ldi	r31, 0x07	; 7
 132:	31 97       	sbiw	r30, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <LCDsendCommand+0x10>
 136:	00 c0       	rjmp	.+0      	; 0x138 <LCDsendCommand+0x16>
 138:	00 00       	nop
 13a:	9b b1       	in	r25, 0x0b	; 11
 13c:	9b 7f       	andi	r25, 0xFB	; 251
 13e:	9b b9       	out	0x0b, r25	; 11
 140:	ef ec       	ldi	r30, 0xCF	; 207
 142:	f7 e0       	ldi	r31, 0x07	; 7
 144:	31 97       	sbiw	r30, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <LCDsendCommand+0x22>
 148:	00 c0       	rjmp	.+0      	; 0x14a <LCDsendCommand+0x28>
 14a:	00 00       	nop
 14c:	f0 e1       	ldi	r31, 0x10	; 16
 14e:	8f 9f       	mul	r24, r31
 150:	c0 01       	movw	r24, r0
 152:	11 24       	eor	r1, r1
 154:	8b b9       	out	0x0b, r24	; 11
 156:	8b b1       	in	r24, 0x0b	; 11
 158:	84 60       	ori	r24, 0x04	; 4
 15a:	8b b9       	out	0x0b, r24	; 11
 15c:	8f ec       	ldi	r24, 0xCF	; 207
 15e:	97 e0       	ldi	r25, 0x07	; 7
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <LCDsendCommand+0x3e>
 164:	00 c0       	rjmp	.+0      	; 0x166 <LCDsendCommand+0x44>
 166:	00 00       	nop
 168:	8b b1       	in	r24, 0x0b	; 11
 16a:	8b 7f       	andi	r24, 0xFB	; 251
 16c:	8b b9       	out	0x0b, r24	; 11
 16e:	ef ec       	ldi	r30, 0xCF	; 207
 170:	f7 e0       	ldi	r31, 0x07	; 7
 172:	31 97       	sbiw	r30, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <LCDsendCommand+0x50>
 176:	00 c0       	rjmp	.+0      	; 0x178 <LCDsendCommand+0x56>
 178:	00 00       	nop
 17a:	08 95       	ret

0000017c <LCDclr>:
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	0e 94 91 00 	call	0x122	; 0x122 <LCDsendCommand>
 182:	08 95       	ret

00000184 <LCDhome>:
 184:	82 e0       	ldi	r24, 0x02	; 2
 186:	0e 94 91 00 	call	0x122	; 0x122 <LCDsendCommand>
 18a:	08 95       	ret

0000018c <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
 18c:	ef 92       	push	r14
 18e:	ff 92       	push	r15
 190:	0f 93       	push	r16
 192:	1f 93       	push	r17
 194:	cf 93       	push	r28
 196:	df 93       	push	r29
 198:	7c 01       	movw	r14, r24
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
 19a:	86 2f       	mov	r24, r22
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	88 0f       	add	r24, r24
 1a4:	99 1f       	adc	r25, r25
 1a6:	88 0f       	add	r24, r24
 1a8:	99 1f       	adc	r25, r25
 1aa:	80 64       	ori	r24, 0x40	; 64
	for (i=0; i<8; i++){
 1ac:	c0 e0       	ldi	r28, 0x00	; 0
 1ae:	d0 e0       	ldi	r29, 0x00	; 0
 1b0:	0d c0       	rjmp	.+26     	; 0x1cc <LCDdefinechar+0x40>
		pcc=pgm_read_byte(&pc[i]);
 1b2:	f7 01       	movw	r30, r14
 1b4:	ec 0f       	add	r30, r28
 1b6:	fd 1f       	adc	r31, r29
 1b8:	14 91       	lpm	r17, Z
		LCDsendCommand(a++);
 1ba:	01 e0       	ldi	r16, 0x01	; 1
 1bc:	08 0f       	add	r16, r24
 1be:	0e 94 91 00 	call	0x122	; 0x122 <LCDsendCommand>
		LCDsendChar(pcc);
 1c2:	81 2f       	mov	r24, r17
 1c4:	0e 94 60 00 	call	0xc0	; 0xc0 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
 1c8:	21 96       	adiw	r28, 0x01	; 1
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
 1ca:	80 2f       	mov	r24, r16
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
 1cc:	c8 30       	cpi	r28, 0x08	; 8
 1ce:	d1 05       	cpc	r29, r1
 1d0:	80 f3       	brcs	.-32     	; 0x1b2 <LCDdefinechar+0x26>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
 1d2:	df 91       	pop	r29
 1d4:	cf 91       	pop	r28
 1d6:	1f 91       	pop	r17
 1d8:	0f 91       	pop	r16
 1da:	ff 90       	pop	r15
 1dc:	ef 90       	pop	r14
 1de:	08 95       	ret

000001e0 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
void LCDinit(void)//Initializes LCD
{
 1e0:	cf 93       	push	r28
 1e2:	df 93       	push	r29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e4:	8f e2       	ldi	r24, 0x2F	; 47
 1e6:	95 e7       	ldi	r25, 0x75	; 117
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <LCDinit+0x8>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <LCDinit+0xe>
 1ee:	00 00       	nop
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
 1f0:	1b b8       	out	0x0b, r1	; 11
	LCP=0x00;
 1f2:	1b b8       	out	0x0b, r1	; 11
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
 1f4:	8a b1       	in	r24, 0x0a	; 10
 1f6:	80 6f       	ori	r24, 0xF0	; 240
 1f8:	8a b9       	out	0x0a, r24	; 10
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
 1fa:	8a b1       	in	r24, 0x0a	; 10
 1fc:	87 60       	ori	r24, 0x07	; 7
 1fe:	8a b9       	out	0x0a, r24	; 10
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 200:	90 e3       	ldi	r25, 0x30	; 48
 202:	9b b9       	out	0x0b, r25	; 11
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 204:	8b b1       	in	r24, 0x0b	; 11
 206:	84 60       	ori	r24, 0x04	; 4
 208:	8b b9       	out	0x0b, r24	; 11
 20a:	ef ec       	ldi	r30, 0xCF	; 207
 20c:	f7 e0       	ldi	r31, 0x07	; 7
 20e:	31 97       	sbiw	r30, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <LCDinit+0x2e>
 212:	00 c0       	rjmp	.+0      	; 0x214 <LCDinit+0x34>
 214:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 216:	8b b1       	in	r24, 0x0b	; 11
 218:	8b 7f       	andi	r24, 0xFB	; 251
 21a:	8b b9       	out	0x0b, r24	; 11
 21c:	ef ec       	ldi	r30, 0xCF	; 207
 21e:	f7 e0       	ldi	r31, 0x07	; 7
 220:	31 97       	sbiw	r30, 0x01	; 1
 222:	f1 f7       	brne	.-4      	; 0x220 <LCDinit+0x40>
 224:	00 c0       	rjmp	.+0      	; 0x226 <LCDinit+0x46>
 226:	00 00       	nop
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 228:	9b b9       	out	0x0b, r25	; 11
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 22a:	8b b1       	in	r24, 0x0b	; 11
 22c:	84 60       	ori	r24, 0x04	; 4
 22e:	8b b9       	out	0x0b, r24	; 11
 230:	8f ec       	ldi	r24, 0xCF	; 207
 232:	97 e0       	ldi	r25, 0x07	; 7
 234:	01 97       	sbiw	r24, 0x01	; 1
 236:	f1 f7       	brne	.-4      	; 0x234 <LCDinit+0x54>
 238:	00 c0       	rjmp	.+0      	; 0x23a <LCDinit+0x5a>
 23a:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 23c:	8b b1       	in	r24, 0x0b	; 11
 23e:	8b 7f       	andi	r24, 0xFB	; 251
 240:	8b b9       	out	0x0b, r24	; 11
 242:	ef ec       	ldi	r30, 0xCF	; 207
 244:	f7 e0       	ldi	r31, 0x07	; 7
 246:	31 97       	sbiw	r30, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <LCDinit+0x66>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <LCDinit+0x6c>
 24c:	00 00       	nop
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
 24e:	80 e2       	ldi	r24, 0x20	; 32
 250:	8b b9       	out	0x0b, r24	; 11
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 252:	8b b1       	in	r24, 0x0b	; 11
 254:	84 60       	ori	r24, 0x04	; 4
 256:	8b b9       	out	0x0b, r24	; 11
 258:	8f ec       	ldi	r24, 0xCF	; 207
 25a:	97 e0       	ldi	r25, 0x07	; 7
 25c:	01 97       	sbiw	r24, 0x01	; 1
 25e:	f1 f7       	brne	.-4      	; 0x25c <LCDinit+0x7c>
 260:	00 c0       	rjmp	.+0      	; 0x262 <LCDinit+0x82>
 262:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 264:	8b b1       	in	r24, 0x0b	; 11
 266:	8b 7f       	andi	r24, 0xFB	; 251
 268:	8b b9       	out	0x0b, r24	; 11
 26a:	ef ec       	ldi	r30, 0xCF	; 207
 26c:	f7 e0       	ldi	r31, 0x07	; 7
 26e:	31 97       	sbiw	r30, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <LCDinit+0x8e>
 272:	00 c0       	rjmp	.+0      	; 0x274 <LCDinit+0x94>
 274:	00 00       	nop
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
 276:	88 e2       	ldi	r24, 0x28	; 40
 278:	0e 94 91 00 	call	0x122	; 0x122 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
 27c:	8c e0       	ldi	r24, 0x0C	; 12
 27e:	0e 94 91 00 	call	0x122	; 0x122 <LCDsendCommand>
		//init 8 custom chars
	uint8_t ch=0, chn=0;
 282:	60 e0       	ldi	r22, 0x00	; 0
 284:	c0 e0       	ldi	r28, 0x00	; 0
	while(ch<64)
 286:	0a c0       	rjmp	.+20     	; 0x29c <LCDinit+0xbc>
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
 288:	d1 e0       	ldi	r29, 0x01	; 1
 28a:	d6 0f       	add	r29, r22
 28c:	8c 2f       	mov	r24, r28
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	88 59       	subi	r24, 0x98	; 152
 292:	9f 4f       	sbci	r25, 0xFF	; 255
 294:	0e 94 c6 00 	call	0x18c	; 0x18c <LCDdefinechar>
		ch=ch+8;
 298:	c8 5f       	subi	r28, 0xF8	; 248
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
 29a:	6d 2f       	mov	r22, r29
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
 29c:	c0 34       	cpi	r28, 0x40	; 64
 29e:	a0 f3       	brcs	.-24     	; 0x288 <LCDinit+0xa8>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
 2a0:	df 91       	pop	r29
 2a2:	cf 91       	pop	r28
 2a4:	08 95       	ret

000002a6 <main>:
#include "lcd.h"


int main(void)
{
	LCDinit();
 2a6:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCDinit>
	LCDclr();
 2aa:	0e 94 be 00 	call	0x17c	; 0x17c <LCDclr>
	LCDhome();
 2ae:	0e 94 c2 00 	call	0x184	; 0x184 <LCDhome>
 2b2:	2f ef       	ldi	r18, 0xFF	; 255
 2b4:	80 e7       	ldi	r24, 0x70	; 112
 2b6:	92 e0       	ldi	r25, 0x02	; 2
 2b8:	21 50       	subi	r18, 0x01	; 1
 2ba:	80 40       	sbci	r24, 0x00	; 0
 2bc:	90 40       	sbci	r25, 0x00	; 0
 2be:	e1 f7       	brne	.-8      	; 0x2b8 <main+0x12>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <main+0x1c>
 2c2:	00 00       	nop
	
    while (1) 
    {
		_delay_ms(100);
		LCDsendChar('1');	
 2c4:	81 e3       	ldi	r24, 0x31	; 49
 2c6:	0e 94 60 00 	call	0xc0	; 0xc0 <LCDsendChar>
 2ca:	f3 cf       	rjmp	.-26     	; 0x2b2 <main+0xc>

000002cc <_exit>:
 2cc:	f8 94       	cli

000002ce <__stop_program>:
 2ce:	ff cf       	rjmp	.-2      	; 0x2ce <__stop_program>
